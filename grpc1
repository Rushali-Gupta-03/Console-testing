from warpdrive import WarpDrive


wd = WarpDrive()

model = wd.get_model_data("model")
# your code here

!pip install grpcio==1.66.2 grpcio-tools==1.66.2 plotly
import grpc
import pyarrow as pa
import pandas as pd
import model_pb2
import model_pb2_grpc

from random import randint
from timeit import default_timer as timer

start_ch = timer()

# open a gRPC channel
channel = grpc.insecure_channel("13.233.198.161:50052")

# create a stub (client)
stub = model_pb2_grpc.ModelServiceStub(channel)
end_ch = timer()



num_rows = 100

# Generate random data for each column
capsule = [randint(0, 1) for _ in range(num_rows)]
age = [randint(50, 90) for _ in range(num_rows)]
race = [randint(1, 2) for _ in range(num_rows)]
dpros = [randint(1, 3) for _ in range(num_rows)]
dcaps = [randint(1, 2) for _ in range(num_rows)]
psa = [round(randint(1, 1000) / 10.0, 1) for _ in range(num_rows)]
vol = [round(randint(0, 1000) / 10.0, 1) for _ in range(num_rows)]
gleason = [randint(6, 9) for _ in range(num_rows)]

ans_lst = []

start = timer()

for i in range(0, len(age) - 1):
    # create a valid request message
    
    features = [age[i], race[i], dpros[i], dcaps[i], psa[i], vol[i], gleason[i]]  # Example feature vector

    #make the call
    response = stub.Predict(model_pb2.PredictRequest(features=features))
    print(f'Prediction: {response.prediction}')

end = timer()
all_time = end - start
ch_time = end_ch - start_ch
print("Time spent for {} predictions is {}".format(len(age), (all_time)))
print("In average, {} second for each prediction".format(all_time / len(age)))
print(
    "That means you can do {} predictions in one second".format(
        int(1 / (all_time / len(age)))
    )
)
print("Time for connecting to server = {}".format(ch_time))
model = wd.get_model_data("model")
print(model)
url_value = model['url']

# Print the extracted URL value
print(url_value)
## Connection

import grpc
import pyarrow as pa
import pandas as pd
import model_pb2
import model_pb2_grpc

from random import randint
from timeit import default_timer as timer

# open a gRPC channel
channel = grpc.insecure_channel(url_value)

# create a stub (client)
stub = model_pb2_grpc.ModelServiceStub(channel)
def get_data(name="train"):
    # Call the GetData method to fetch serialized data
    data_request = model_pb2.DataRequest(dataset_name=name)
    data_response = stub.GetData(data_request)
    
    # Deserialize the Arrow table from binary format
    serialized_data = data_response.serialized_data
    reader = pa.ipc.open_stream(pa.BufferReader(serialized_data))
    table = reader.read_all()
    
    # Convert the Arrow table to Pandas DataFrame
    df = table.to_pandas()
    print("Retrieved data:")
    print(df)
    
    return df
   
train = get_data("train")
wd.create_df(train, "Train dataset")
wd.save_table(train, "Train Table")
test = get_data("test")
test
wd.save_table(test, "Test Table")
wd.create_df(test, "Test Dataset")
